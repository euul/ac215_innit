name: Integration Tests

on:
  push:
    branches:
      - milestone4  # Trigger on pushes to the milestone4 branch
  pull_request:
    branches:
      - milestone4  # Trigger on pull requests to milestone4

jobs:
  test_webscraping:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out repository
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Set up Docker Compose
    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Step 3: Build and Start Webscraping Service
    - name: Build and start webscraping container
      run: |
        docker-compose -f src/docker-compose.yml up -d webscraping
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 4: Run Integration Tests for Webscraping
    - name: Run integration tests for webscraping
      run: |
        docker exec src_webscraping_1 pipenv run pytest /app/tests/integration_tests/webscraping.py
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 5: Generate Coverage Report for Webscraping
    - name: Generate coverage report for webscraping
      run: |
        docker exec src_webscraping_1 pipenv run coverage run --rcfile=/app/.coveragerc -m pytest /app/tests/integration_tests/webscraping.py
        docker exec src_webscraping_1 pipenv run coverage html --rcfile=/app/.coveragerc
        docker cp src_webscraping_1:/app/htmlcov ./htmlcov
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 6: Upload Coverage Report for Webscraping
    - name: Upload webscraping coverage report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: webscraping-coverage-report
        path: ./htmlcov

    # Step 7: Tear Down Webscraping Container
    - name: Tear down webscraping container
      if: always()
      run: docker-compose -f src/docker-compose.yml down

  test_datapipeline:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out repository
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Set up Docker Compose
    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Step 3: Build and Start Datapipeline Service
    - name: Build and start question_bank container
      run: |
        docker-compose -f src/docker-compose.yml up -d question_bank
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 4: Run Integration Tests for question_bank
    - name: Run integration tests for question_bank
      run: |
        docker exec src_question_bank_1 pipenv run pytest /app/tests/integration_tests/question_bank.py
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 5: Generate Coverage Report for question_bank
    - name: Generate coverage report for question_bank
      run: |
        docker exec src_question_bank_1 pipenv run coverage run --rcfile=/app/.coveragerc -m pytest /app/tests/integration_tests/question_bank.py
        docker exec src_question_bank_1 pipenv run coverage html --rcfile=/app/.coveragerc
        docker cp src_question_bank_1:/app/htmlcov ./htmlcov
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 6: Upload Coverage Report for Datapipeline
    - name: Upload question_bank coverage report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: question_bank-coverage-report
        path: ./htmlcov

    # Step 7: Tear Down Datapipeline Container
    - name: Tear down question_bank container
      if: always()
      run: docker-compose -f src/docker-compose.yml down
