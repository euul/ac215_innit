name: Integration Tests

on:
  push:
    branches:
      - milestone4
  pull_request:
    branches:
      - milestone4

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out repository
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Set up Docker Compose
    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Step 3: Test Access to Secrets
    - name: Test Access to Secrets
      run: |
        echo "Testing secrets..."
        echo "$DATA_SERVICE_ACCOUNT" | jq '.' || echo "DATA_SERVICE_ACCOUNT is not valid JSON"
        echo "TEXT_GENERATOR: $TEXT_GENERATOR"
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 4: Build and Start Containers
    - name: Build and start containers
      run: |
        docker-compose -f src/docker-compose.yml up -d
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 5: List Running Containers
    - name: List running Docker containers
      run: docker ps

    # Step 5.5: idk
    - name: Prepare coverage directory
      run: mkdir -p ./webscraping_coverage

    # Step 6: Run Integration Tests for webscraping
    - name: Run integration tests inside webscraping container
      run: |
        docker exec src_webscraping_1 pipenv run coverage run --rcfile=/app/.coveragerc -m pytest /app/tests/integration_tests/test_webscraping.py
        docker exec src_webscraping_1 pipenv run coverage html --rcfile=/app/.coveragerc
        docker cp src_webscraping_1:/app/htmlcov ./htmlcov_webscraping
        docker cp src_webscraping_1:/app/.coverage ./webscraping_coverage/.coverage
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}
    
    # Step 6.5: idk
    - name: Prepare coverage directory
      run: mkdir -p ./question_bank_coverage

    # Step 7: Run Integration Tests for question_bank
    - name: Run integration tests inside question_bank container
      run: |
        docker exec src_question_bank_1 pipenv run coverage run --rcfile=/app/.coveragerc -m pytest /app/tests/integration_tests/test_question_bank.py
        docker exec src_question_bank_1 pipenv run coverage html --rcfile=/app/.coveragerc
        docker cp src_question_bank_1:/app/htmlcov ./htmlcov_question_bank
        docker cp src_question_bank_1:/app/.coverage ./question_bank_coverage/.coverage
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}
  # Step 6.5: Debug Coverage Files
    - name: Debug coverage files
      run: |
        echo "Checking contents of webscraping_coverage directory:"
        ls -al ./webscraping_coverage || echo "Directory does not exist or is empty"

        echo "Checking contents of question_bank_coverage directory:"
        ls -al ./question_bank_coverage || echo "Directory does not exist or is empty"


    # Step 8: Upload Coverage Reports and Raw Data
    - name: Upload webscraping coverage report
      uses: actions/upload-artifact@v3
      with:
        name: webscraping-coverage-report
        path: ./htmlcov_webscraping
    
    - name: Upload question_bank coverage report
      uses: actions/upload-artifact@v3
      with:
        name: question-bank-coverage-report
        path: ./htmlcov_question_bank
    
    - name: Upload webscraping raw coverage data
      uses: actions/upload-artifact@v3
      with:
        name: webscraping-raw-coverage
        path: ./webscraping_coverage/.coverage
      
    - name: Upload question bank raw coverage data
      uses: actions/upload-artifact@v3
      with:
        name: question-bank-raw-coverage
        path: ./question_bank_coverage/.coverage    

    # Step 9: Tear Down Containers
    - name: Tear down containers
      if: always()
      run: docker-compose -f src/docker-compose.yml down

  post-processing:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Step 1: Download raw coverage files
      - name: Download raw coverage files
        uses: actions/download-artifact@v3
        with:
          name: raw-coverage-files
          path: ./coverage_files

      # Step 2: Combine raw coverage files
      - name: Combine .coverage files
        run: |
          pip install coverage
          mkdir -p combined_coverage
          cp ./coverage_files/.coverage ./combined_coverage/.coverage.webscraping
          cp ./coverage_files/.coverage ./combined_coverage/.coverage.question_bank
          coverage combine ./combined_coverage/.coverage.webscraping ./combined_coverage/.coverage.question_bank
          coverage html -d ./combined_coverage

      # Step 3: Upload Combined Report
      - name: Upload combined coverage report
        uses: actions/upload-artifact@v3
        with:
          name: combined-coverage-report
          path: ./combined_coverage
