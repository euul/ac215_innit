name: Integration Tests

on:
  push:
    branches:
      - milestone4
  pull_request:
    branches:
      - milestone4

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out repository
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Set up Docker Compose
    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Step 3: Test Access to Secrets
    - name: Test Access to Secrets
      run: |
        echo "Testing secrets..."
        echo "$DATA_SERVICE_ACCOUNT" | jq '.' || echo "DATA_SERVICE_ACCOUNT is not valid JSON"
        echo "TEXT_GENERATOR: $TEXT_GENERATOR"
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 4: Build and Start Containers
    - name: Build and start containers
      run: |
        docker-compose -f src/docker-compose.yml up -d
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 5: Debug .coveragerc Mounting
    - name: Debug .coveragerc in webscraping
      run: docker exec src_webscraping_1 ls -l /app/.coveragerc

    - name: Debug .coveragerc in question_bank
      run: docker exec src_question_bank_1 ls -l /app/.coveragerc

    - name: Debug .coveragerc in collector
      run: docker exec src_collector_1 ls -l /app/.coveragerc

    # Step 6: Run Integration Tests for webscraping
    - name: Run integration tests for webscraping
      run: |
        docker exec src_webscraping_1 pipenv run coverage run --rcfile=/app/.coveragerc -m pytest /app/tests/integration_tests/test_webscraping.py
        docker cp src_webscraping_1:/app/.coverage src_collector_1:/app/coverage_data/.coverage_webscraping
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 7: Run Integration Tests for question_bank
    - name: Run integration tests for question_bank
      run: |
        docker exec src_question_bank_1 pipenv run coverage run --rcfile=/app/.coveragerc -m pytest /app/tests/integration_tests/test_question_bank.py
        docker cp src_question_bank_1:/app/.coverage src_collector_1:/app/coverage_data/.coverage_question_bank
      env:
        DATA_SERVICE_ACCOUNT: ${{ secrets.DATA_SERVICE_ACCOUNT }}
        TEXT_GENERATOR: ${{ secrets.TEXT_GENERATOR }}

    # Step 8: Combine Coverage Reports with collector
    - name: Combine coverage reports using collector
      run: |
        docker exec src_collector_1 pip install coverage
        docker exec src_collector_1 coverage combine --rcfile=/app/.coveragerc /app/coverage_data/.coverage_webscraping /app/coverage_data/.coverage_question_bank
        docker exec src_collector_1 coverage html --rcfile=/app/.coveragerc -d /app/htmlcov_combined
        docker exec src_collector_1 ls -R /app/htmlcov_combined
        docker cp src_collector_1:/app/htmlcov_combined ./htmlcov_combined

    # Step 9: Upload Combined Coverage Report
    - name: Upload combined coverage report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: combined-coverage-report
        path: ./htmlcov_combined

    # Step 10: Tear Down Containers
    - name: Tear down containers
      if: always()
      run: docker-compose -f src/docker-compose.yml down
