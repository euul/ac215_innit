---
- name: "Create Kubernetes Cluster and deploy multiple containers"
  hosts: localhost
  gather_facts: false

  vars:
    cluster_name: "test-innit-cluster-james"
    machine_type: "n2d-standard-2"
    machine_disk_size: 30
    initial_node_count: 2

  tasks:
  - name: "Create a GKE cluster"
    google.cloud.gcp_container_cluster: # An Ansible module for managing GKE clusters.
      name: "{{cluster_name}}"
      initial_node_count: "{{ initial_node_count }}"
      location: "{{ gcp_zone }}"
      project: "{{ gcp_project }}"
      release_channel:
        channel: "UNSPECIFIED"
      ip_allocation_policy:
        use_ip_aliases: "yes"
      auth_kind: "{{ gcp_auth_kind }}"
      service_account_file: "{{ gcp_service_account_file }}"
      state: "{{ cluster_state }}"
    register: cluster # Captures the output of the google.cloud.gcp_container_cluster module and stores it in the cluster variable.

  - name: "Create a Node Pool"
    google.cloud.gcp_container_node_pool: # An Ansible module specifically designed for managing Node Pools in GKE.
      name: default-pool
      initial_node_count: "{{ initial_node_count }}"
      cluster: "{{ cluster }}"
      location: "{{ gcp_zone }}"
      project: "{{ gcp_project }}"
      config:
        machine_type: "{{ machine_type }}" # Specifies the type of VM to use for the nodes (e.g., n2d-standard-2).
        image_type: "cos_containerd" # Determines the OS image for the nodes. Here, it's "cos_containerd", a lightweight, secure OS optimized for containers.
        disk_size_gb: "{{ machine_disk_size }}"
        oauth_scopes:
          - "https://www.googleapis.com/auth/devstorage.read_only"
          - "https://www.googleapis.com/auth/logging.write"
          - "https://www.googleapis.com/auth/monitoring"
          - "https://www.googleapis.com/auth/servicecontrol"
          - "https://www.googleapis.com/auth/service.management.readonly"
          - "https://www.googleapis.com/auth/trace.append"
      autoscaling:
        enabled: "yes"
        min_node_count: "1"
        max_node_count: "{{ initial_node_count }}"
      management:
        auto_repair: "yes"
        auto_upgrade: "yes" # Automatically upgraded when new versions of the node software are available.
      auth_kind: "{{ gcp_auth_kind }}"
      service_account_file: "{{ gcp_service_account_file }}"
      state: "{{ cluster_state }}"
  
  - name: "Connect to cluster (update kubeconfig)" 
    shell: "gcloud container clusters get-credentials {{ cluster.name }} --zone {{ gcp_zone }} --project {{ gcp_project }}" # Fetches authentication credentials and updates the local ~/.kube/config file, which is used by kubectl to interact with the cluster.
    when: cluster_state == "present"

  # Creates a Kubernetes namespace within the cluster. 
  # Namespaces are used to logically separate resources within a Kubernetes cluster.
  - name: "Create Namespace"
    k8s: # An Ansible module for interacting with Kubernetes objects using kubectl-like syntax.
      name: "{{cluster_name}}-namespace" # The name of the namespace to be created. Dynamically generated as {{ cluster_name }}-namespace to match the cluster name.
      api_version: v1
      kind: Namespace
      state: present
    when: cluster_state == "present"

  # Adds the nginx-ingress Helm repository to Helm’s configuration.
  # Helm is a package manager for Kubernetes, and repositories like nginx-stable provide charts (pre-configured Kubernetes resources) for applications such as nginx-ingress.
  # After this task,  The Helm repository nginx-stable is added to the control node's Helm configuration. The repository becomes available for installing charts, such as nginx-ingress.
  - name: "Add nginx-ingress helm repo"
    community.kubernetes.helm_repository: # This module manages Helm repositories, allowing you to add or remove them.
      name: nginx-stable
      repo_url: https://helm.nginx.com/stable
    when: cluster_state == "present"

  # nginx-ingress is an ingress controller, it is used to manage external access to services within the cluster, typically via HTTP/HTTPS.
  # Configures the cluster to handle ingress resources, enabling routing of external traffic to services.
  - name: "Install nginx-ingress"
    community.kubernetes.helm: # Manages Helm charts (installation, upgrade, removal).
      name: nginx-ingress
      namespace: "{{cluster_name}}-namespace"
      chart_ref: nginx-stable/nginx-ingress
      state: present
    when: cluster_state == "present"

  # Copies a file named .docker-tag from the local machine to the target system (localhost).
  - name: "Copy docker tag file"
    copy:
      src: .docker-tag
      dest: .docker-tag
      mode: 0644 # permissions 0644 (readable and writable by the owner, readable by others).
    when: cluster_state == "present"

  - name: "Get docker tag"
    shell: "cat .docker-tag"
    register: tag # Captures the output of the command and stores it in the tag variable for later use.
    when: cluster_state == "present"

  - name: "Print tag"
    debug:
      var: tag
    when: cluster_state == "present"

  - name: "Create Persistent Volume Claim"
    k8s: # Used to manage Kubernetes resources declaratively (like kubectl apply).
      state: present # Ensures the resource exists in the cluster. If it doesn’t, it will be created.
      definition:
        apiVersion: v1
        kind: PersistentVolumeClaim # Indicates that the resource being created is a PVC.
        metadata:
          name: persistent-pvc
          namespace: "{{cluster_name}}-namespace"
        spec:
          accessModes:
            - ReadWriteOnce # Allows the volume to be mounted as read-write by a single node.
          resources:
            requests:
              storage: 5Gi
    when: cluster_state == "present"

  # imports a set of credentials into the Kubernetes cluster as a Secret.
  # A kubectl command to create a Kubernetes Secret. The Secret is named gcp-service-key.
  - name: Importing credentials as a Secret
    shell: |
      #!/bin/bash
      kubectl create secret generic gcp-service-key \
        --from-file=deployment.json=../secrets/deployment.json \
        --from-file=data-service-account.json=../secrets/data-service-account.json \
        --namespace="{{cluster_name}}-namespace"
    register: create_secret_op
    ignore_errors: yes # This might be intentional because the Secret may already exist, and the task would fail if Kubernetes does not allow overwriting Secrets.
    when: cluster_state == "present"
  
  - name: "Print Create Secret Output"
    debug:
      var: create_secret_op
    when: cluster_state == "present"
  

  - name: "Create Deployment for Frontend"
    k8s:
      state: present
      definition: # Defines the Kubernetes Deployment resource in YAML format. This is equivalent to a Kubernetes manifest file.
        apiVersion: v1 # For Deployments, it should be apps/v1, so there might be a mistake here. (Deployments are managed under the apps API group.)
        kind: Deployment # Specifies that the resource being defined is a Deployment.
        metadata:
          name: frontend # The name of the Deployment
          namespace: "{{cluster_name}}-namespace"
        spec: # Defines the desired state of the Deployment
          selector: # Specifies the label that Kubernetes uses to identify pods managed by this Deployment.
            matchLabels:
              run: frontend # Pods with the label run: frontend are managed by this Deployment.
          template: # Defines the pod template for the Deployment.
            metadata:
              labels: # Adds the label run: frontend to the pods, ensuring they match the Deployment’s selector.
                run: frontend
            spec: # Describes how the pods should run
              containers: # This Deployment runs a single container named frontend.
              - image: "gcr.io/{{ gcp_project }}/frontend-shivas:{{ tag.stdout}}" # tag.stdout: The Docker tag, retrieved from the .docker-tag file earlier in the playbook.
                imagePullPolicy: Always # The container image is pulled only if it is not already present on the node.
                name: frontend # Sets the container name to frontend.
                ports:
                - containerPort: 3000 # Exposes port 3000 inside the container, where the frontend application likely runs. Pods expose port 3000 for the frontend application, which other Kubernetes resources (e.g., a Service or Ingress) can route traffic to.
                  protocol: TCP
    when: cluster_state == "present"

  - name: "Create Deployment for API Service"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Deployment
        metadata:
          name: api
          namespace: "{{cluster_name}}-namespace"
        spec:
          selector:
            matchLabels:
              run: api
          template:
            metadata:
              labels:
                run: api
            spec:
              volumes: # Defines volumes available to the containers in the pod.
                - name: persistent-vol
                  emptyDir: {}
                - name: google-cloud-key # A volume that uses the Kubernetes Secret named gcp-service-key (created before)
                  secret:
                    secretName: gcp-service-key
              containers:
              - image: gcr.io/{{ gcp_project }}/api-service-shivas:{{ tag.stdout}}
                imagePullPolicy: Always
                name: api
                ports:
                - containerPort: 9000 # Exposes port 9000 inside the container for the API service.
                  protocol: TCP
                volumeMounts:
                  - name: persistent-vol
                    mountPath: /persistent # Mounted at /persistent inside the container.
                  - name: google-cloud-key
                    mountPath: /secrets
                env:
                  - name: GOOGLE_APPLICATION_CREDENTIALS
                    value: /secrets/data-service-account.json
                  - name: GCS_BUCKET_NAME
                    value: innit_articles_bucket
                  - name: GCP_PROJECT
                    value: "{{ gcp_project }}"
    when: cluster_state == "present"

  - name: "Create Service for Frontend"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend
          namespace: "{{cluster_name}}-namespace"
        spec:
          ports: # Defines how the Service exposes ports for external access
          - port: 3000 # The port exposed by the Service.
            protocol: TCP
            targetPort: 3000 # The port on the container to which the traffic is forwarded. Matches the containerPort defined in the Frontend Deployment.
          selector:
            run: frontend # Matches pods labeled with run: frontend. This connects the Service to the pods created by the Frontend Deployment.
          type: NodePort # Exposes the Service on a randomly assigned port in the range 30000–32767 on each Kubernetes node (A node is a physical or virtual machine in a Kubernetes cluster.). The port allows external clients to access the frontend application.
    when: cluster_state == "present"

  - name: "Create Service for API Service"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: api
          namespace: "{{cluster_name}}-namespace"
        spec:
          ports:
          - port: 9000
            protocol: TCP
            targetPort: 9000
          selector:
            run: api
          type: NodePort
    when: cluster_state == "present"

  # Waits for the Nginx Ingress Controller to become ready and retrieves its external IP address.
  - name: Wait for Ingress Nginx to get ready
    shell: |
      #!/bin/bash
      kubectl get service nginx-ingress-controller --namespace="{{cluster_name}}-namespace" -ojson | jq -r '.status.loadBalancer.ingress[].ip'
    register: nginx_ingress # Captures the output of the command in the variable nginx_ingress.
    delay: 10 # Waits 10 seconds between retries.
    retries: 20 # Retries the command up to 20 times (total wait time: 200 seconds)
    until: nginx_ingress.stderr == "" # Ensures the command runs until no error is encountered (stderr is empty).
    when: cluster_state == "present"

  # Stores the Nginx Ingress Controller's external IP address in the variable nginx_ingress_ip.
  - name: Set Nginx Ingress IP
    set_fact:
      nginx_ingress_ip: "{{nginx_ingress.stdout}}"
    when: cluster_state == "present"

  - name: Debug Ingress Nginx IP Address
    debug:
      msg: "Ingress Nginx IP Address: {{ nginx_ingress_ip }}"
    when: cluster_state == "present"

  - name: Debug vars
    debug:
      var: nginx_ingress_ip
      verbosity: 0
    when: cluster_state == "present"

  # This task creates a Kubernetes Ingress Resource using the Nginx Ingress Controller. 
  # An Ingress provides HTTP and HTTPS routing to services within a Kubernetes cluster based on hostnames, paths, and rules.

  # External users can access the services through the Ingress IP using:
  # http://{{ nginx_ingress_ip }}.sslip.io/ for the frontend.
  # http://{{ nginx_ingress_ip }}.sslip.io/api/ for the API.
  - name: "Create Ingress Controller"
    k8s:
      state: present
      definition:
        apiVersion: networking.k8s.io/v1 # Specifies the API version for the Ingress resource. As of Kubernetes 1.19+, the Ingress API is under networking.k8s.io/v1.
        kind: Ingress
        metadata:
          name: ingress-resource
          namespace: "{{cluster_name}}-namespace" 
          annotations:
            kubernetes.io/ingress.class: "nginx" # Informs Kubernetes to use the Nginx Ingress Controller for this resource.
            nginx.ingress.kubernetes.io/ssl-redirect: "false" # Disables automatic redirection of HTTP traffic to HTTPS.
            nginx.org/rewrites: "serviceName=frontend rewrite=/;serviceName=api rewrite=/" # Custom Nginx annotation for rewrite rules: (1) Routes / to the frontend service. (2) Routes /api/ to the api service.
        spec:
          rules: # Defines the routing rules for HTTP traffic. Each rule consists of a host and a set of paths.
          - host: "{{ nginx_ingress_ip }}.sslip.io" # Specifies the hostname for accessing the Ingress. Combines the external IP (nginx_ingress_ip) of the Nginx Ingress Controller with a dynamic DNS service (sslip.io). Example: If nginx_ingress_ip is 203.0.113.45, the host becomes 203.0.113.45.sslip.io.
            http:
              paths:
              - path: / # Routes traffic sent to / to the frontend service on port 3000.
                pathType: Prefix # Matches all paths that start with the specified prefix.
                backend:
                  service: 
                    name: frontend
                    port:
                      number: 3000
              - path: /api/ # Routes traffic sent to /api/ to the api service on port 9000.
                pathType: Prefix
                backend:
                  service:
                    name: api
                    port:
                      number: 9000
    when: cluster_state == "present"

